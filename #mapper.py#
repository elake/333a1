"""
Some of this code was saved for posterity's sake. The function used to determine
the key is sitd. It uses lobcheck, which uses check.
"""





map = [[0x7, 0x5, 0x0, 0x4, 0x2, 0x3, 0xb, 0x6, 0xa, 0x8, 0x9, 0xd, 0xc, 0xf, 0xe, 0x1],[0x3, 0x8, 0xd, 0xa, 0xc, 0xe, 0xf, 0xb, 0x7, 0x6, 0x4, 0x5, 0x1, 0x2, 0x0, 0x9],[0x4, 0x0, 0x3, 0x1, 0xb, 0xa, 0x8, 0x5, 0x9, 0xd,0xc, 0xe, 0xf, 0x6, 0x7, 0x2],[0x9, 0xe, 0x7, 0xc, 0x6, 0x4, 0x5, 0xd, 0x1, 0x0, 0x2, 0x3, 0xb, 0x8, 0xa, 0xf],[0x1, 0x3, 0xa, 0x2, 0x8, 0x9, 0xd, 0x0, 0xc, 0xe, 0xf, 0x7, 0x6, 0x5, 0x4, 0xb],[0xe, 0x6, 0x5, 0x7, 0x1, 0x0, 0x2, 0xf, 0x3, 0xb, 0xa, 0x8,0x9, 0xc, 0xd, 0x4],[0x2, 0xa, 0x9, 0xb, 0xd, 0xc, 0xe, 0x3, 0xf, 0x7, 0x6, 0x4, 0x5, 0x0, 0x1, 0x8],[0x6, 0x1, 0x2, 0x5, 0x3, 0xb, 0xa, 0x4, 0x8, 0x9, 0xd, 0xc, 0xe, 0x7, 0xf, 0x0],[0xb, 0x9, 0xc, 0x8, 0xe, 0xf, 0x7, 0xa, 0x6, 0x4, 0x5, 0x1, 0x0, 0x3,0x2, 0xd],[0x0, 0xb, 0x8, 0x3, 0x9, 0xd, 0xc, 0x2, 0xe, 0xf, 0x7, 0x6, 0x4, 0x1, 0x5, 0xa],[0x8, 0xc, 0xf, 0xd, 0x7, 0x6, 0x4, 0x9, 0x5, 0x1, 0x0, 0x2, 0x3, 0xa, 0xb, 0xe],[0x5, 0x2, 0xb, 0x0, 0xa, 0x8, 0x9, 0x1, 0xd, 0xc, 0xe, 0xf, 0x7, 0x4, 0x6, 0x3],[0xd, 0xf, 0x6, 0xe, 0x4, 0x5, 0x1, 0xc, 0x0, 0x2, 0x3, 0xb, 0xa, 0x9, 0x8, 0x7],[0xc, 0x7, 0x4, 0xf, 0x5, 0x1, 0x0, 0xe, 0x2, 0x3, 0xb, 0xa, 0x8, 0xd, 0x9, 0x6],[0xa, 0xd, 0xe, 0x9, 0xf, 0x7, 0x6, 0x8, 0x4, 0x5, 0x1, 0x0, 0x2, 0xb, 0x3, 0xc],[0xf, 0x4, 0x1, 0x6, 0x0, 0x2, 0x3, 0x7, 0xb, 0xa, 0x8, 0x9, 0xd, 0xe, 0xc, 0x5]]

def checks(c, k, map, e=None):
    """
    Decrypts a single hex digit (4 bits), encrypts if e.
    
    >>> check(7, 10, map)
    3
    >>> check(0x7, 0xa, map)
    3
    """
    for i in range(len(map)):
        if map[0][i] == k:
            x = i
    if e:
        for i in range(len(map)):
            if map[i][0] == c:
                return map[i][x]
    else:
        for i in range(len(map)):
            if map[i][x] == c:
                return map[i][0]

def check(c, k, map, e=None):
    """
    Decrypts a single hex digit, encrypts if e.
    """
    for i in range(len(map)):
        if map[i][k] == c:
            return i

def lobcheck(c, k, map, e=None):
    """
    Takes two lists of integer bytes (use ord to convert bytes to integers)
    and decrypts c using key k. Returns a list of integers base 10. Encrypts
    if e.

    >>>lobcheck([0xa2, 0xbb, 0x2a], [0x43, 0x42, 0x41], map)
    [67, 66, 65]
    """
    rval = []
    ii = 0
    while ii < len(c):
        for i in range(len(k)):
            try:
                cur = c[ii]
            except IndexError:
                break
            ii += 1
            xlow = check(cur % 16, k[i] >> 4, map, e)
            xhigh = check(cur >> 4, k[i] % 16, map, e)
            rval.append((xhigh << 4) + xlow)
    return rval

def brute(c, kl, map):
    """
    Takes a list of keys (keys are also lists) and tries all of the keys.
    Only returns if every character is printable ascii.
    
    >>> brute([162, 187, 42], [[67, 66, 65], [55, 43, 44]], map)
    [67, 66, 65]
    """

    for k in kl:
        if max(lobcheck(c, k, map)) <= 127:
            return k

def key_generator(n, charset, curl=None):
    """
    Currently incomplete, takes a maximum keylength n and a set of
    allowable characters, and returns every possible key within
    those boundaries. 
    """
    if not curl:
        curl = [[x] for x in charset]
    elif len(curl[len(curl)-1]) >= n:
        return curl
    else:
        pass
        
def v_freq(ct, kl):
    """
    Takes a ciphertext and provides a frequency table for each
    character of the key given the proposed keylength.

    >>> v_freq(['a', 'b', 'c', 'b', 'c', 'c'], 2)
    {0: Counter({'c': 2, 'a': 1}), 1: Counter({'b': 2})}
    """
    frequency_map = {}
    from collections import Counter
    for i in range(kl):
        curlist = [ct[i] for i in range(i, len(ct)-1, kl)]
        frequency_map[i] = Counter(curlist)
    return frequency_map
        
#xord is the ciphertext as a list of integers
xord = []
f = open("ciphertext1", "rb")
while True:
    fc = f.read(1)
    if fc:
        xord.append(ord(fc))
    else:
        break

def f_check(pset, kset, cbyte, map):
    """
    returns tuples of possible plaintext and key bytes
    that form c with the given map.
    """
    combos = []
    for p in pset:
        for k in kset:
            if lobcheck([p], [k], map, 1) == [cbyte]:
                combos.append((p, k))
      return combos

pset = []
for i in range(0x20, 0x7f, 1):
    pset.append(i)

pset.append(10)
pset.append(9)
pset.append(13)
kset = []
for i in range(0x30, 0x3a, 1):
    kset.append(i)
for i in range(0x41, 0x5b, 1):
    kset.append(i)
for i in range(0x61, 0x7b, 1):
    kset.append(i)

def sitd(xord, pset, kset, kl, map):
    """
    For each possible key letter, try encoding each byte on kl interval
    and save any key letter that produces printable results every time.
    """
    curlist = {}
    successes = []
    #Split chiphertext into characters based on place in keylength,
    #every 2nd out of 8, 3rd out of 8, etc.
    for i in range(kl):
        curlist[i] = [xord[y] for y in range(i, len(xord)-1, kl)]
    for i in range(kl):
        for t in kset:
            successes.append((i, t))
            for c in curlist[i]:
                #Try every key char on each t in curlist
                if lobcheck([c], [t], map)[0] not in pset:
                    #Remove keys that produce invalid values
                    successes.remove((i, t))
                    break
    return successes
